{"name": "test_ManualAdjustment_Turbo", "status": "broken", "statusDetails": {"message": "UnboundLocalError: local variable 'Result' referenced before assignment", "trace": "self = <TestCases.test_TC_011_ManualAdjustments.Test_ManualAdjustments object at 0x000002A298FB19A0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c176d7ddd6fe86dc1d5cd43b84c916cc\")>\n\n    @pytest.mark.TurboPricing\n    def test_ManualAdjustment_Turbo(self, setup):\n        self.lgrObj = Logger.logGen('TC_011_2')\n        self.lgrObj.info(\"#################################################################\")\n        self.lgrObj.info(\" TC_011_2: Different Type of Adjustments Reg Cart Turbo Pricing \")\n        self.lgrObj.info(\"#################################################################\")\n    \n        self.lgrObj.info(\"---------- Login to the Application\")\n        self.driver = setup\n        self.driver.get(self.baseUrl)\n        self.lgnObj = loginPage(self.driver)\n        self.lgnObj.setUsername(self.UserName)\n        self.lgnObj.setPassword(self.Password)\n        self.lgnObj.clickLoginButton()\n        self.driver.maximize_window()\n        self.lgrObj.info(\"---------- Switch to Lightning if not set\")\n        self.HomePageObj = HomePage(self.driver)\n        self.HomePageObj.switchToLightning()\n    \n        hmpageObj = HomePage(self.driver)\n        hmpageObj.switchToLightning()\n    \n        self.lgrObj.info(\"---------- Create a new Proposal\")\n        hmpageObj.ClickSearchAppsIcon()\n        # td_AppToSearchSelect=\n        appToSearchFor = XLUtils.readData(self.file, 'TC_011', 2, 2)\n        hmpageObj.SearchAndClickApp(appToSearchFor)\n    \n        # Set up Object for Proposal Tab Page object class\n        PropsPageObj = ProposalDetailPage(self.driver)\n    \n        # Click on New button to go to Create Proposal Edit page\n        PropsPageObj.ClickProposalPageButton('New')\n        # CLick Next in the Record Type Dialog Box\n        PropsPageObj.DialogAcceptOrCancel('Next')\n    \n        self.lgrObj.info(\"---------- Set Proposal Fields\")\n        # Proposal Name\n        label = XLUtils.readData(self.file, 'TC_011', 1, 3)\n        value = XLUtils.readData(self.file, 'TC_011', 2, 3)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Price List\n        label = XLUtils.readData(self.file, 'TC_011', 1, 4)\n        value = XLUtils.readData(self.file, 'TC_011', 2, 4)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Opportunity\n        label = XLUtils.readData(self.file, 'TC_011', 1, 5)\n        value = XLUtils.readData(self.file, 'TC_011', 2, 5)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Account\n        label = XLUtils.readData(self.file, 'TC_011', 1, 6)\n        value = XLUtils.readData(self.file, 'TC_011', 2, 6)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Click on Save button\n        PropsPageObj.ClickProposalPageButton('Save')\n        self.lgrObj.info(\"---------- Configure the Proposal\")\n        PropsPageObj.ClickConfigureProductButton('MN - 2020 (Turbo)')\n        CtlgPgObj = CatalogPage(self.driver)\n        HomePage.SwitchToFrame(self)\n        PrdName = XLUtils.readData(self.file, 'TC_010', 2, 7)\n        self.lgrObj.info(\"---------- Search and add Product to Cart\")\n        CtlgPgObj.SearchAndAddProduct('Add to Cart', PrdName)\n        CtlgPgObj.ClickCatalogPageButton('Go to Pricing')\n        # Set up Object for Cart Page\n        CartPgObj = CartPage(self.driver)\n        CartPgObj.WaitForPricingProgressBarToFinish()\n        self.lgrObj.info(\"---------- Click on Net Adj link for the Product\")\n        CartPgObj.ClickNetAdjForAnyProduct(PrdName)\n    \n        self.lgrObj.info(\"---------- Set Adjustments in Net Adj Popup and Click on Save\")\n        NetAdjObj = NetAdjustmentPopUp(self.driver)\n    \n        # Adjustment Type = % Discount\n        NetAdjObj.SetAdjustmentTypeAndValue('% Discount','10')\n        time.sleep(2)\n        #self.lgrObj.info(\"---------- Click on Reprice button\")\n    \n        CartPgObj.ClickCartButtons('Reprice')\n        CartPgObj.WaitForPricingProgressBarToFinish()\n        grandTotal = CartPgObj.GetValueOfTotal('Grand Total')\n        SlicedGrandTotal = grandTotal[4:]\n    \n        if str(\"90\") in str(float(SlicedGrandTotal)):\n            assert True\n            self.lgrObj.info(\"---------- (PASSED): Manual Adjustment (% Discount), Grand Total is correct ----------\")\n        else:\n            self.lgrObj.info(\"---------- (FAILED): Manual Adjustment (% Discount), Grand Total is NOT correct ----------\")\n            assert False\n            self.driver.close()\n    \n        # Adjustment Type = Discount Amount\n        CartPgObj.ClickNetAdjForAnyProduct(PrdName)\n        NetAdjObj.SetAdjustmentTypeAndValue('Discount Amount', '20')\n        time.sleep(2)\n        #self.lgrObj.info(\"---------- Click on Reprice button\")\n    \n        CartPgObj.ClickCartButtons('Reprice')\n        CartPgObj.WaitForPricingProgressBarToFinish()\n        grandTotal = CartPgObj.GetValueOfTotal('Grand Total')\n        SlicedGrandTotal = grandTotal[4:]\n    \n        if str(\"80\") in str(float(SlicedGrandTotal)):\n            assert True\n            self.lgrObj.info(\"---------- (PASSED): Manual Adjustment (Discount Amount), Grand Total is correct ----------\")\n        else:\n            self.lgrObj.info(\"---------- (FAILED): Manual Adjustment (Discount Amount), Grand Total is NOT correct ----------\")\n            assert False\n            self.driver.close()\n    \n        # Adjustment Type = % Markup\n        time.sleep(2)\n        CartPgObj.ClickNetAdjForAnyProduct(PrdName)\n        NetAdjObj.SetAdjustmentTypeAndValue('% Markup', '10')\n        time.sleep(2)\n        #self.lgrObj.info(\"---------- Click on Reprice button\")\n    \n        CartPgObj.ClickCartButtons('Reprice')\n        CartPgObj.WaitForPricingProgressBarToFinish()\n        grandTotal = CartPgObj.GetValueOfTotal('Grand Total')\n        SlicedGrandTotal = grandTotal[4:]\n    \n        if str(\"110\") in str(float(SlicedGrandTotal)):\n                assert True\n                self.lgrObj.info(\"---------- (PASSED): Manual Adjustment (%Mark up), Grand Total is correct ----------\")\n        else:\n                self.lgrObj.info(\"---------- (FAILED): Manual Adjustment (%Mark up), Grand Total is NOT correct ----------\")\n                assert False\n                self.driver.close()\n    \n        # Adjustment Type = Markup Amount\n        time.sleep(2)\n        CartPgObj.ClickNetAdjForAnyProduct(PrdName)\n        NetAdjObj.SetAdjustmentTypeAndValue('Markup Amount', '20')\n        time.sleep(2)\n        #self.lgrObj.info(\"---------- Click on Reprice button\")\n    \n        CartPgObj.ClickCartButtons('Reprice')\n        CartPgObj.WaitForPricingProgressBarToFinish()\n        grandTotal = CartPgObj.GetValueOfTotal('Grand Total')\n        SlicedGrandTotal = grandTotal[4:]\n    \n        if str(\"120\") in str(float(SlicedGrandTotal)):\n                assert True\n                self.lgrObj.info(\"---------- (PASSED): Manual Adjustment (Markup Amount), Grand Total is correct ----------\")\n        else:\n                self.lgrObj.info(\"---------- (FAILED): Manual Adjustment (Markup Amount), Grand Total is NOT correct ----------\")\n                assert False\n                self.driver.close()\n    \n        # # Adjustment Type = Base Price Override, When applied on Bundle, the Base Pice though on UI does not get\n        # # changed but takes the override value. It does not affect the Option base price nor apply any discount\n        # time.sleep(2)\n        # CartPgObj.ClickNetAdjForAnyProduct(PrdName)\n        # NetAdjObj.SetAdjustmentTypeAndValue('Base Price Override', '30')\n        # time.sleep(2)\n        # #self.lgrObj.info(\"---------- Click on Reprice button\")\n        #\n        # CartPgObj.ClickCartButtons('Reprice')\n        # CartPgObj.WaitForPricingProgressBarToFinish()\n        # grandTotal = CartPgObj.GetValueOfTotal('Grand Total')\n        # SlicedGrandTotal = grandTotal[4:]\n        #\n        # if str(\"30\") in str(float(SlicedGrandTotal)):\n        #         assert True\n        #         self.lgrObj.info(\"---------- (PASSED): Manual Adjustment (Base Price Override), Grand Total is correct ----------\")\n        # else:\n        #         self.lgrObj.info(\"---------- (FAILED): Manual Adjustment (Base Price Override), Grand Total is NOT correct ----------\")\n        #         assert False\n        #         self.driver.close()\n    \n        # Adjustment Type = Price Override. When applied on Bundle, the Net Price, Net Adj% gets updated.\n        # The Base Price, Option Price of the Bundle does not get changed. Only the Net Price.\n        # The the same proportion of discount gets applied on the Net Price of the Option too\n        time.sleep(2)\n        CartPgObj.ClickNetAdjForAnyProduct(PrdName)\n        NetAdjObj.SetAdjustmentTypeAndValue('Price Override', '30')\n        time.sleep(2)\n        #self.lgrObj.info(\"---------- Click on Reprice button\")\n    \n        CartPgObj.ClickCartButtons('Reprice')\n        CartPgObj.WaitForPricingProgressBarToFinish()\n        grandTotal = CartPgObj.GetValueOfTotal('Grand Total')\n        SlicedGrandTotal = grandTotal[4:]\n    \n        if str(\"30\") in str(float(SlicedGrandTotal)):\n                assert True\n                self.lgrObj.info(\"---------- (PASSED): Manual Adjustment (Price Override), Grand Total is correct ----------\")\n        else:\n                self.lgrObj.info(\"---------- (FAILED): Manual Adjustment (Price Override), Grand Total is NOT correct ----------\")\n                assert False\n                self.driver.close()\n    \n        # Adjustment Type = Price Factor. When applied there will be no changed to Base Price, Option price\n        # for bundle or option line. However the Net Price of bundle will get multiplied by the factor\n        # That results in + Net % hike in Bunlde and that same % gets applied on option which increases it's net Price\n        time.sleep(2)\n        CartPgObj.ClickNetAdjForAnyProduct(PrdName)\n        NetAdjObj.SetAdjustmentTypeAndValue('Price Factor', '2')\n        time.sleep(2)\n        #self.lgrObj.info(\"---------- Click on Reprice button\")\n    \n        CartPgObj.ClickCartButtons('Reprice')\n        CartPgObj.WaitForPricingProgressBarToFinish()\n        grandTotal = CartPgObj.GetValueOfTotal('Grand Total')\n        SlicedGrandTotal = grandTotal[4:]\n    \n        if str(\"200\") in str(float(SlicedGrandTotal)):\n                assert True\n                self.lgrObj.info(\"---------- (PASSED): Manual Adjustment (Price Factor), Grand Total is correct ----------\")\n        else:\n                self.lgrObj.info(\"---------- (FAILED): Manual Adjustment (Price Factor), Grand Total is NOT correct ----------\")\n                assert False\n                self.driver.close()\n    \n        # Delete the Product & Add Product to test \"Allow Manual Adjustment False at PLI\"\n        CartPgObj.ClickCartLineItemCheckBox(PrdName)\n        CartPgObj.ClickMassAction('Delete')\n        CartPgObj.WaitForPricingProgressBarToFinish()\n        time.sleep(3)\n    \n        self.lgrObj.info(\"---------- Go back to Catalog Page and the Prd to test Allow Manual Adj False at PLI\")\n        CartPgObj.ClickCartButtons('Add More Products')\n    \n        # Search and add product which is set to Allow Man Adj False\n        PrdName2 = XLUtils.readData(self.file, 'TC_011', 3, 7)\n        CtlgPgObj.SearchAndAddProduct('Add to Cart', PrdName2)\n        CtlgPgObj.ClickCatalogPageButton('Go to Pricing')\n        CartPgObj.WaitForPricingProgressBarToFinish()\n    \n        # Check Net Adjustment link is disabled for this product\n>       Result1=CartPgObj.IsEnalbedOrDisabled(PrdName2,'Net Adjustment %')\n\nTestCases\\test_TC_011_ManualAdjustments.py:510: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageObjects.CartPage.CartPage object at 0x000002A2992DD7C0>\nPrdName = 'MN - 2020 Standalone (Allow Man Adj. False)'\nColName = 'Net Adjustment %'\n\n    def IsEnalbedOrDisabled(self,PrdName,ColName):\n        print(\"---------- Method:IsEnalbedOrDisabled\")\n        rowNo = self.getRowNoOfProduct(PrdName)\n        if ColName == \"Net Adjustment %\":\n            elesPath = \"//div[@class='right ui-grid-render-container-right ui-grid-render-container']//div[@title='Adjustments']//dynamic-field\"\n            elesCnt = self.driver.find_elements_by_xpath(elesPath)\n            for i in range(100):\n                if i == rowNo:\n                    Result=elesCnt[i].get_attribute(\"class\")\n                    break\n>       return Result\nE       UnboundLocalError: local variable 'Result' referenced before assignment\n\npageObjects\\CartPage.py:223: UnboundLocalError"}, "start": 1612292120168, "stop": 1612292350904, "uuid": "05d98ca6-4f2e-4a24-ae1c-b870978c5120", "historyId": "aae5c8d15c91ad676f7a8487c5756a6f", "testCaseId": "9c2e22c0a39e261cb7c32d90adfa0ec8", "fullName": "test_TC_011_ManualAdjustments.Test_ManualAdjustments#test_ManualAdjustment_Turbo", "labels": [{"name": "tag", "value": "TurboPricing"}, {"name": "suite", "value": "test_TC_011_ManualAdjustments"}, {"name": "subSuite", "value": "Test_ManualAdjustments"}, {"name": "host", "value": "L005891"}, {"name": "thread", "value": "21860-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_TC_011_ManualAdjustments"}]}