{
  "uid" : "82729695e34f7e5f",
  "name" : "test_Prop2Agrmnt_EnterpriseClassic",
  "fullName" : "test_TC_010_Proposal_Finalize_Generate_Accept_Create_Agreement.Test_Proposal_To_Agreement_Flow#test_Prop2Agrmnt_EnterpriseClassic",
  "historyId" : "588402535756ceb13f9e060e0d86a05c",
  "time" : {
    "start" : 1612291437859,
    "stop" : 1612291657182,
    "duration" : 219323
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False",
  "statusTrace" : "self = <TestCases.test_TC_010_Proposal_Finalize_Generate_Accept_Create_Agreement.Test_Proposal_To_Agreement_Flow object at 0x000002A299186760>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a8f17472973bc87e294b498b910b1c13\")>\n\n    @pytest.mark.EnterpriseRegularPricing\n    def test_Prop2Agrmnt_EnterpriseClassic(self, setup):\n        self.lgrObj = Logger.logGen('TC_010_4')\n        self.lgrObj.info(\"######################################################################\")\n        self.lgrObj.info(\"  TC_010_4: Proposal_To_Agreement flow (Enterprise Cart Reg Pricing   \")\n        self.lgrObj.info(\"######################################################################\")\n    \n        self.lgrObj.info(\"---------- Login to the Application\")\n        self.driver = setup\n        self.driver.get(self.baseUrl)\n        self.lgnObj = loginPage(self.driver)\n        self.lgnObj.setUsername(self.UserName)\n        self.lgnObj.setPassword(self.Password)\n        self.lgnObj.clickLoginButton()\n        self.driver.maximize_window()\n        self.lgrObj.info(\"---------- Switch to Lightning if not set\")\n        self.HomePageObj = HomePage(self.driver)\n        self.HomePageObj.switchToLightning()\n    \n        hmpageObj = HomePage(self.driver)\n        hmpageObj.switchToLightning()\n    \n        self.lgrObj.info(\"---------- Create a new Proposal\")\n        hmpageObj.ClickSearchAppsIcon()\n        # td_AppToSearchSelect=\n        appToSearchFor = XLUtils.readData(self.file, 'TC_010', 2, 2)\n        hmpageObj.SearchAndClickApp(appToSearchFor)\n    \n        # Set up Object for Proposal Tab Page object class\n        PropsPageObj = ProposalDetailPage(self.driver)\n    \n        # Click on New button to go to Create Proposal Edit page\n        PropsPageObj.ClickProposalPageButton('New')\n        # CLick Next in the Record Type Dialog Box\n        PropsPageObj.DialogAcceptOrCancel('Next')\n    \n        self.lgrObj.info(\"---------- Set Proposal Fields\")\n        # Set QTC Profile\n        PropsPageObj.SetProposalField('QTC Profile','Enterprise')\n    \n        # Proposal Name\n        label = XLUtils.readData(self.file, 'TC_010', 1, 3)\n        value = XLUtils.readData(self.file, 'TC_010', 2, 3)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Price List\n        label = XLUtils.readData(self.file, 'TC_010', 1, 4)\n        value = XLUtils.readData(self.file, 'TC_010', 2, 4)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Opportunity\n        label = XLUtils.readData(self.file, 'TC_010', 1, 5)\n        value = XLUtils.readData(self.file, 'TC_010', 2, 5)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Account\n        label = XLUtils.readData(self.file, 'TC_010', 1, 6)\n        value = XLUtils.readData(self.file, 'TC_010', 2, 6)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Click on Save button\n        PropsPageObj.ClickProposalPageButton('Save')\n        self.lgrObj.info(\"---------- Configure the Proposal\")\n        PropsPageObj.ClickConfigureProductButton('MN - 2020 (Quick Launch)')\n        CtlgPgObj = CatalogPage(self.driver)\n        self.lgrObj.info(\"---------- Search and Configure the Product\")\n        HomePage.SwitchToFrame(self)\n        PrdName = XLUtils.readData(self.file, 'TC_010', 2, 7)\n        self.lgrObj.info(\"---------- Search and add the Product to Cart\")\n        CtlgPgObj.SearchAndAddProduct('Add to Cart', PrdName)\n        CtlgPgObj.ClickCatalogPageButton('Go to Pricing')\n        # Set up Object for Cart Page\n        CartPgObj = CartPage(self.driver)\n        CartPgObj.WaitForPricingProgressBarToFinish()\n        self.lgrObj.info(\"---------- Finalize the Cart\")\n        CartPgObj.ClickCartButtons('Finalize')\n        self.lgrObj.info(\"---------- Click on Related Tab, Check Configuration Status\")\n    \n        time.sleep(5)\n        PropsPageObj.ClickOnDetailPageTab('Related')\n        ConfigSts = PropsPageObj.CheckConfigurationStatus('Finalized')\n        if str(ConfigSts) == str('Finalized'):\n            assert True\n            self.lgrObj.info(\"---------- (PASSED): Proposal is Finalized Successfully\")\n        else:\n            self.lgrObj.info(\"---------- (FAILED): Proposal is NOT Finalized Successfully\")\n            assert False\n            self.driver.close()\n        PropsPageObj.ClickOnDetailPageTab('Details')\n        self.lgrObj.info(\"---------- Generate Proposal Document\")\n        PropsPageObj.ClickProposalPageButton('Generate')\n    \n        GenPgObj = GenerateProposalDocPage(self.driver)\n        Template = XLUtils.readData(self.file, 'TC_010', 2, 8)\n        print(\"Template: \" + str(Template))\n        GenPgObj.SelectTemplate(Template)\n        GenPgObj.ClickButton('Generate')\n    \n        # Check if Document gets generated or not\n        TrOrFal = GenPgObj.IsDocGenerated()\n        print(TrOrFal)\n    \n        if str(TrOrFal) >= str(\"1\"):\n            self.lgrObj.info(\"---------- (PASSED): Proposal Document generated successfully\")\n            assert True\n        else:\n            self.lgrObj.info(\"---------- (FAILED): Proposal Document is NOT generated\")\n            assert False\n            self.driver.close()\n        # Return to Proposal\n        GenPgObj.ClickButton('Return')\n    \n        # Verify if Approval Stage is updated to Generated\n        time.sleep(4)\n        Value = PropsPageObj.getFieldValue('Picklist', 'Approval Stage')\n        if str(Value) == \"Generated\":\n            self.lgrObj.info(\"---------- (PASSED): Approval Stage is correctly updated to Generated\")\n            assert True\n        else:\n            self.lgrObj.info(\"---------- (FAILED): Approval Stage is NOT updated to Generated\")\n            assert False\n            self.driver.close()\n    \n        self.lgrObj.info(\"---------- Present the Proposal\")\n        PropsPageObj.ClickProposalPageButton('Present')\n        PrsntPropObj = PresentProposalPage(self.driver)\n        label = XLUtils.readData(self.file, 'TC_010', 1, 3)\n        value = XLUtils.readData(self.file, 'TC_010', 2, 3)\n        PrsntPropObj.SelectAttachment(value)\n        PrsntPropObj.ClickButton('Next')\n        time.sleep(6)\n        PrsntPropObj.SetTextBox('Additional', 'mnayak@conga.com')\n        PrsntPropObj.ClickButton('Send')\n        PrsntPropObj.DialogYesOrNo('Yes')\n        # Verify if Approval Stage is updated to Presented\n        time.sleep(4)\n        Value = PropsPageObj.getFieldValue('Picklist', 'Approval Stage')\n        if str(Value) == \"Presented\":\n            self.lgrObj.info(\"---------- (PASSED): Approval Stage is correctly updated to Presented\")\n            assert True\n        else:\n            self.lgrObj.info(\"---------- (FAILED): Approval Stage is NOT updated to Presented\")\n            assert False\n            self.driver.close()\n    \n        self.lgrObj.info(\"---------- Accept the Proposal\")\n        PropsPageObj.ClickProposalPageButton('Accept')\n        # Verify if Approval Stage is updated to Presented\n        time.sleep(4)\n        Value1 = PropsPageObj.getFieldValue('Picklist', 'Approval Stage')\n        print(Value1)\n        if str(Value1) == str(\"Accepted\"):\n            self.lgrObj.info(\"---------- (PASSED): Approval Stage is correctly updated to Accepted\")\n            assert True\n        else:\n            self.lgrObj.info(\"---------- (FAILED): Approval Stage is NOT updated to Accepted\")\n>           assert False\nE           assert False\n\nTestCases\\test_TC_010_Proposal_Finalize_Generate_Accept_Create_Agreement.py:833: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "setup",
    "time" : {
      "start" : 1612291434645,
      "stop" : 1612291437858,
      "duration" : 3213
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "EnterpriseRegularPricing"
  }, {
    "name" : "suite",
    "value" : "test_TC_010_Proposal_Finalize_Generate_Accept_Create_Agreement"
  }, {
    "name" : "subSuite",
    "value" : "Test_Proposal_To_Agreement_Flow"
  }, {
    "name" : "host",
    "value" : "L005891"
  }, {
    "name" : "thread",
    "value" : "21860-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_TC_010_Proposal_Finalize_Generate_Accept_Create_Agreement"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "EnterpriseRegularPricing" ]
  },
  "source" : "82729695e34f7e5f.json",
  "parameterValues" : [ ]
}