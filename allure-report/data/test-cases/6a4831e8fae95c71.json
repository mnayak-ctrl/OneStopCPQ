{
  "uid" : "6a4831e8fae95c71",
  "name" : "test_Prop2Agrmnt_Split",
  "fullName" : "test_TC_010_Proposal_Finalize_Generate_Accept_Create_Agreement.Test_Proposal_To_Agreement_Flow#test_Prop2Agrmnt_Split",
  "historyId" : "a0968881bcc85bb69e4c8552c4644f96",
  "time" : {
    "start" : 1612291350307,
    "stop" : 1612291434562,
    "duration" : 84255
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//md-dialog[contains(@aria-label,'The request')]//button[contains(text(),'OK')]\"}\n  (Session info: headless chrome=88.0.4324.104)",
  "statusTrace" : "self = <TestCases.test_TC_010_Proposal_Finalize_Generate_Accept_Create_Agreement.Test_Proposal_To_Agreement_Flow object at 0x000002A299186850>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3b69abe00561a794ceee2b0b2a32f546\")>\n\n    @pytest.mark.Split\n    def test_Prop2Agrmnt_Split(self, setup):\n        self.lgrObj = Logger.logGen('TC_010_3')\n        self.lgrObj.info(\"#################################################################\")\n        self.lgrObj.info(\"  TC_010_3: Proposal_To_Agreement flow Split Cart Async Pricing  \")\n        self.lgrObj.info(\"#################################################################\")\n    \n        self.lgrObj.info(\"---------- Login to the Application\")\n        self.driver = setup\n        self.driver.get(self.baseUrl)\n        self.lgnObj = loginPage(self.driver)\n        self.lgnObj.setUsername(self.UserName)\n        self.lgnObj.setPassword(self.Password)\n        self.lgnObj.clickLoginButton()\n        self.driver.maximize_window()\n        self.lgrObj.info(\"---------- Switch to Lightning if not set\")\n        self.HomePageObj = HomePage(self.driver)\n        self.HomePageObj.switchToLightning()\n    \n        hmpageObj = HomePage(self.driver)\n        hmpageObj.switchToLightning()\n    \n        self.lgrObj.info(\"---------- Create a new Proposal\")\n        hmpageObj.ClickSearchAppsIcon()\n        # td_AppToSearchSelect=\n        appToSearchFor = XLUtils.readData(self.file, 'TC_010', 2, 2)\n        hmpageObj.SearchAndClickApp(appToSearchFor)\n    \n        # Set up Object for Proposal Tab Page object class\n        PropsPageObj = ProposalDetailPage(self.driver)\n    \n        # Click on New button to go to Create Proposal Edit page\n        PropsPageObj.ClickProposalPageButton('New')\n        # CLick Next in the Record Type Dialog Box\n        PropsPageObj.DialogAcceptOrCancel('Next')\n    \n        self.lgrObj.info(\"---------- Set Proposal Fields\")\n        # Set QTC Profile\n        PropsPageObj.SetProposalField('QTC Profile','Split')\n    \n        # Proposal Name\n        label = XLUtils.readData(self.file, 'TC_010', 1, 3)\n        value = XLUtils.readData(self.file, 'TC_010', 2, 3)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Price List\n        label = XLUtils.readData(self.file, 'TC_010', 1, 4)\n        value = XLUtils.readData(self.file, 'TC_010', 2, 4)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Opportunity\n        label = XLUtils.readData(self.file, 'TC_010', 1, 5)\n        value = XLUtils.readData(self.file, 'TC_010', 2, 5)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Account\n        label = XLUtils.readData(self.file, 'TC_010', 1, 6)\n        value = XLUtils.readData(self.file, 'TC_010', 2, 6)\n        PropsPageObj.SetProposalField(label, value)\n    \n        # Click on Save button\n        PropsPageObj.ClickProposalPageButton('Save')\n        self.lgrObj.info(\"---------- Configure the Proposal\")\n        PropsPageObj.ClickConfigureProductButton('MN - 2020 (Quick Launch)')\n        CtlgPgObj = CatalogPage(self.driver)\n        self.lgrObj.info(\"---------- Search and Configure the Product\")\n        HomePage.SwitchToFrame(self)\n        PrdName = XLUtils.readData(self.file, 'TC_010', 2, 7)\n        self.lgrObj.info(\"---------- Search and add the Product to Cart\")\n        CtlgPgObj.SearchAndAddProduct('View Cart', PrdName)\n    \n        # Click on Mini-Cart & then View Cart button\n        CtlgPgObj.ClickCatalogPageButton('mini-cart')\n        CtlgPgObj.ClickCatalogPageButton('view-cart')\n        self.lgrObj.info(\"---------- Go to Shopping Cart\")\n    \n        # Set up Object for Cart Page\n        CartPgObj = CartPage(self.driver)\n        self.lgrObj.info(\"---------- Click on Submit for Pricing (Async) button\")\n        CartPgObj.ClickCartButtons('Submit for Pricing (Async)')\n        CartPgObj.ClickCartButtons('Submit & Stay On Cart')\n        print(\"Wait is needed--Checked\")\n        time.sleep(3)\n        CartPgObj.WaitForPricingProgressBarToFinish()\n    \n        self.lgrObj.info(\"---------- Finalize the Cart\")\n        CartPgObj.ClickCartButtons('Finalize')\n        # Click OK in the Dialog\n>       CartPgObj.FinalizeDialog('OK')\n\nTestCases\\test_TC_010_Proposal_Finalize_Generate_Accept_Create_Agreement.py:537: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\CartPage.py:185: in FinalizeDialog\n    ele=self.driver.find_element_by_xpath(path)\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:394: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002A299021E50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x770A75F4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x770A75C4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//md-dialog[contains(@aria-label,'The request')]//button[contains(text(),'OK')]\"}\nE         (Session info: headless chrome=88.0.4324.104)\n\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "setup",
    "time" : {
      "start" : 1612291347097,
      "stop" : 1612291350307,
      "duration" : 3210
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "Split"
  }, {
    "name" : "suite",
    "value" : "test_TC_010_Proposal_Finalize_Generate_Accept_Create_Agreement"
  }, {
    "name" : "subSuite",
    "value" : "Test_Proposal_To_Agreement_Flow"
  }, {
    "name" : "host",
    "value" : "L005891"
  }, {
    "name" : "thread",
    "value" : "21860-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_TC_010_Proposal_Finalize_Generate_Accept_Create_Agreement"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "Split" ]
  },
  "source" : "6a4831e8fae95c71.json",
  "parameterValues" : [ ]
}